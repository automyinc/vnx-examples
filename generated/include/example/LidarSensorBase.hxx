
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_example_LidarSensorBase_HXX_
#define INCLUDE_example_LidarSensorBase_HXX_

#include <example/package.hxx>
#include <vnx/Module.h>


namespace example {

class LidarSensorBase : public ::vnx::Module {
public:
	
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	LidarSensorBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	friend std::ostream& operator<<(std::ostream& _out, const LidarSensorBase& _value);
	friend std::istream& operator>>(std::istream& _in, LidarSensorBase& _value);
	
	static const vnx::TypeCode* get_type_code();
	static std::shared_ptr<vnx::TypeCode> create_type_code();
	
protected:
	
	void handle_switch(std::shared_ptr<const vnx::Sample> _sample);
	bool call_switch(vnx::TypeInput& _in, vnx::TypeOutput& _out, const vnx::TypeCode* _call_type, const vnx::TypeCode* _return_type);
	
};


} // namespace example

#endif // INCLUDE_example_LidarSensorBase_HXX_
