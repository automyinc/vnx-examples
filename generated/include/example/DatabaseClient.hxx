
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_example_Database_CLIENT_HXX_
#define INCLUDE_example_Database_CLIENT_HXX_

#include <vnx/Client.h>
#include <example/Object.hxx>
#include <example/Transaction.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.h>


namespace example {

class DatabaseClient : public vnx::Client {
public:
	DatabaseClient(const std::string& service_name);
	
	DatabaseClient(vnx::Hash64 service_addr);
	
	void add_object(const ::std::string& table, const ::std::shared_ptr<const ::example::Object>& object);
	
	void add_object_async(const ::std::string& table, const ::std::shared_ptr<const ::example::Object>& object);
	
	void add_user(const ::std::string& name);
	
	void add_user_async(const ::std::string& name);
	
	void add_user_balance(const ::std::string& name, const ::float64_t& value);
	
	void add_user_balance_async(const ::std::string& name, const ::float64_t& value);
	
	void delete_object(const ::std::string& table, const ::std::string& key);
	
	void delete_object_async(const ::std::string& table, const ::std::string& key);
	
	::std::vector<::std::shared_ptr<const ::example::Object>> get_all_objects(const ::std::string& table);
	
	::std::shared_ptr<const ::example::Object> get_object(const ::std::string& table, const ::std::string& key);
	
	::float64_t get_user_balance(const ::std::string& name);
	
	void handle(const ::std::shared_ptr<const ::example::Transaction>& sample);
	
	void handle_async(const ::std::shared_ptr<const ::example::Transaction>& sample);
	
	void save();
	
	void save_async();
	
	void subtract_user_balance(const ::std::string& name, const ::float64_t& value);
	
	void subtract_user_balance_async(const ::std::string& name, const ::float64_t& value);
	
};


} // namespace example

#endif // INCLUDE_example_Database_CLIENT_HXX_
