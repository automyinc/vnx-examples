
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_example_PACKAGE_HXX_
#define INCLUDE_example_PACKAGE_HXX_

#include <vnx/Type.h>

#include <math/package.hxx>


namespace example {

extern std::shared_ptr<vnx::Topic> transactions;

class CameraSensorBase;
class DatabaseBase;
class ImageProcessorBase;
class LidarInfo;
class LidarPointCloud;
class LidarProcessorBase;
class LidarSensorBase;
class Object;
class Table;
class Transaction;
class User;
struct lidar_point_t;
struct transaction_type_e;

} // namespace example


namespace vnx {

void read(TypeInput& in, ::example::CameraSensorBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::DatabaseBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::ImageProcessorBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::LidarInfo& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::LidarPointCloud& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::LidarProcessorBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::LidarSensorBase& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::Object& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::Table& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::Transaction& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::User& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::lidar_point_t& value, const TypeCode* type_code, const uint16_t* code);
void read(TypeInput& in, ::example::transaction_type_e& value, const TypeCode* type_code, const uint16_t* code);

void write(TypeOutput& out, const ::example::CameraSensorBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::DatabaseBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::ImageProcessorBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::LidarInfo& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::LidarPointCloud& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::LidarProcessorBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::LidarSensorBase& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::Object& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::Table& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::Transaction& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::User& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::lidar_point_t& value, const TypeCode* type_code, const uint16_t* code);
void write(TypeOutput& out, const ::example::transaction_type_e& value, const TypeCode* type_code, const uint16_t* code);

void read(std::istream& in, ::example::CameraSensorBase& value);
void read(std::istream& in, ::example::DatabaseBase& value);
void read(std::istream& in, ::example::ImageProcessorBase& value);
void read(std::istream& in, ::example::LidarInfo& value);
void read(std::istream& in, ::example::LidarPointCloud& value);
void read(std::istream& in, ::example::LidarProcessorBase& value);
void read(std::istream& in, ::example::LidarSensorBase& value);
void read(std::istream& in, ::example::Object& value);
void read(std::istream& in, ::example::Table& value);
void read(std::istream& in, ::example::Transaction& value);
void read(std::istream& in, ::example::User& value);
void read(std::istream& in, ::example::lidar_point_t& value);
void read(std::istream& in, ::example::transaction_type_e& value);

void write(std::ostream& out, const ::example::CameraSensorBase& value);
void write(std::ostream& out, const ::example::DatabaseBase& value);
void write(std::ostream& out, const ::example::ImageProcessorBase& value);
void write(std::ostream& out, const ::example::LidarInfo& value);
void write(std::ostream& out, const ::example::LidarPointCloud& value);
void write(std::ostream& out, const ::example::LidarProcessorBase& value);
void write(std::ostream& out, const ::example::LidarSensorBase& value);
void write(std::ostream& out, const ::example::Object& value);
void write(std::ostream& out, const ::example::Table& value);
void write(std::ostream& out, const ::example::Transaction& value);
void write(std::ostream& out, const ::example::User& value);
void write(std::ostream& out, const ::example::lidar_point_t& value);
void write(std::ostream& out, const ::example::transaction_type_e& value);

void accept(Visitor& visitor, const ::example::CameraSensorBase& value);
void accept(Visitor& visitor, const ::example::DatabaseBase& value);
void accept(Visitor& visitor, const ::example::ImageProcessorBase& value);
void accept(Visitor& visitor, const ::example::LidarInfo& value);
void accept(Visitor& visitor, const ::example::LidarPointCloud& value);
void accept(Visitor& visitor, const ::example::LidarProcessorBase& value);
void accept(Visitor& visitor, const ::example::LidarSensorBase& value);
void accept(Visitor& visitor, const ::example::Object& value);
void accept(Visitor& visitor, const ::example::Table& value);
void accept(Visitor& visitor, const ::example::Transaction& value);
void accept(Visitor& visitor, const ::example::User& value);
void accept(Visitor& visitor, const ::example::lidar_point_t& value);
void accept(Visitor& visitor, const ::example::transaction_type_e& value);

template<>
struct type<::example::CameraSensorBase> {
	void read(TypeInput& in, ::example::CameraSensorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::CameraSensorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::CameraSensorBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::CameraSensorBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::CameraSensorBase& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::DatabaseBase> {
	void read(TypeInput& in, ::example::DatabaseBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::DatabaseBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::DatabaseBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::DatabaseBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::DatabaseBase& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::ImageProcessorBase> {
	void read(TypeInput& in, ::example::ImageProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::ImageProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::ImageProcessorBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::ImageProcessorBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::ImageProcessorBase& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::LidarInfo> {
	void read(TypeInput& in, ::example::LidarInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::LidarInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::LidarInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::LidarInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::LidarInfo& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::LidarPointCloud> {
	void read(TypeInput& in, ::example::LidarPointCloud& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::LidarPointCloud& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::LidarPointCloud& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::LidarPointCloud& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::LidarPointCloud& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::LidarProcessorBase> {
	void read(TypeInput& in, ::example::LidarProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::LidarProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::LidarProcessorBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::LidarProcessorBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::LidarProcessorBase& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::LidarSensorBase> {
	void read(TypeInput& in, ::example::LidarSensorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::LidarSensorBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::LidarSensorBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::LidarSensorBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::LidarSensorBase& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::Object> {
	void read(TypeInput& in, ::example::Object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::Object& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::Object& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::Object& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::Object& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::Table> {
	void read(TypeInput& in, ::example::Table& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::Table& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::Table& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::Table& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::Table& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::Transaction> {
	void read(TypeInput& in, ::example::Transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::Transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::Transaction& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::Transaction& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::Transaction& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::User> {
	void read(TypeInput& in, ::example::User& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::User& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::User& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::User& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::User& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::lidar_point_t> {
	void read(TypeInput& in, ::example::lidar_point_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::lidar_point_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::lidar_point_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::lidar_point_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::lidar_point_t& value) {
		vnx::accept(visitor, value);
	}
};

template<>
struct type<::example::transaction_type_e> {
	void read(TypeInput& in, ::example::transaction_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::example::transaction_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::example::transaction_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::example::transaction_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::example::transaction_type_e& value) {
		vnx::accept(visitor, value);
	}
};


} // namespace vnx

#endif // INCLUDE_example_PACKAGE_HXX_
