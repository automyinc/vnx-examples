
// AUTO GENERATED by vnxcppcodegen

#include <example/package.hxx>
#include <example/DatabaseClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace example {

DatabaseClient::DatabaseClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

DatabaseClient::DatabaseClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

void DatabaseClient::add_user(const ::std::string& name) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x2741180fbb8f23a1ull));
	{
		vnx::write(_out, name, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::add_user_async(const ::std::string& name) {
	vnx_is_async = true;
	add_user(name);
}

void DatabaseClient::add_user_balance(const ::std::string& name, const ::vnx::float64_t& value) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x3d6e042d45e04326ull));
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, value);
		vnx::write(_out, name, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::add_user_balance_async(const ::std::string& name, const ::vnx::float64_t& value) {
	vnx_is_async = true;
	add_user_balance(name, value);
}

::std::shared_ptr<const ::example::User> DatabaseClient::get_user(const ::std::string& name) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0x3e6f70937269a136ull));
	{
		vnx::write(_out, name, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::std::shared_ptr<const ::example::User> _ret_0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		if(_return_type->is_matched) {
		}
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

::vnx::float64_t DatabaseClient::get_user_balance(const ::std::string& name) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xe625a8cfd51e9a9eull));
	{
		vnx::write(_out, name, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
	
	vnx::BinaryInputStream _stream_in(vnx_return_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _type_code->return_type;
	::vnx::float64_t _ret_0 = 0;
	{
		const char* const _buf = _in.read(_return_type->total_field_size);
		if(_return_type->is_matched) {
			{
				const vnx::TypeField* const _field = _return_type->field_map[0];
				if(_field) {
					vnx::read_value(_buf + _field->offset, _ret_0, _field->code.data());
				}
			}
		}
		for(const vnx::TypeField* _field : _return_type->ext_fields) {
			switch(_field->native_index) {
				default: vnx::skip(_in, _return_type, _field->code.data());
			}
		}
	}
	return _ret_0;
}

void DatabaseClient::handle(const ::std::shared_ptr<const ::example::Transaction>& sample) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xa9a81442632b020eull));
	{
		vnx::write(_out, sample, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::handle_async(const ::std::shared_ptr<const ::example::Transaction>& sample) {
	vnx_is_async = true;
	handle(sample);
}

void DatabaseClient::subtract_user_balance(const ::std::string& name, const ::vnx::float64_t& value) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = vnx::get_type_code(vnx::Hash64(0xe58127da78610817ull));
	{
		char* const _buf = _out.write(8);
		vnx::write_value(_buf + 0, value);
		vnx::write(_out, name, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	vnx_request(_argument_data);
}

void DatabaseClient::subtract_user_balance_async(const ::std::string& name, const ::vnx::float64_t& value) {
	vnx_is_async = true;
	subtract_user_balance(name, value);
}


} // namespace example
