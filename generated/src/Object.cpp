
// AUTO GENERATED by vnxcppcodegen

#include <example/package.hxx>
#include <example/Object.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>


namespace example {


const vnx::Hash64 Object::VNX_TYPE_HASH(0x57fefc7fcf83cc3dull);
const vnx::Hash64 Object::VNX_CODE_HASH(0xf2a29eb6266d7f18ull);

vnx::Hash64 Object::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* Object::get_type_name() const {
	return "example.Object";
}

std::shared_ptr<Object> Object::create() {
	return std::make_shared<Object>();
}

std::shared_ptr<vnx::Value> Object::clone() const {
	return std::make_shared<Object>(*this);
}

void Object::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void Object::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void Object::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = get_type_code();
	_visitor.type_begin(*_type_code);
	_visitor.type_end(*_type_code);
}

void Object::write(std::ostream& _out) const {
	_out << "{";
	_out << "}";
}

void Object::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
	}
}

std::ostream& operator<<(std::ostream& _out, const Object& _value) {
	_value.write(_out);
	return _out;
}

std::istream& operator>>(std::istream& _in, Object& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* Object::get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x57fefc7fcf83cc3dull));
	if(!type_code) {
		type_code = vnx::register_type_code(create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> Object::create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "example.Object";
	type_code->type_hash = vnx::Hash64(0x57fefc7fcf83cc3dull);
	type_code->code_hash = vnx::Hash64(0xf2a29eb6266d7f18ull);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<Object>(); };
	type_code->build();
	return type_code;
}


} // namespace example


namespace vnx {

void read(TypeInput& in, ::example::Object& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		type_code = type_code->depends[code[1]];
	}
	const char* const _buf = in.read(type_code->total_field_size);
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::example::Object& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		type_code = vnx::write_type_code<::example::Object>(out);
		vnx::write_class_header<::example::Object>(out);
	} else {
		type_code = type_code->depends[code[1]];
	}
	if(!type_code->is_native) {
		throw std::logic_error("write(example::Object): type_code is not native");
	}
}

void read(std::istream& in, ::example::Object& value) {
	value.read(in);
}

void write(std::ostream& out, const ::example::Object& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::example::Object& value) {
	value.accept(visitor);
}

} // vnx
