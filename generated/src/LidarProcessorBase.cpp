
// AUTO GENERATED by vnxcppcodegen

#include <example/package.hxx>
#include <example/LidarProcessorBase.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>
#include <vnx/Config.h>


namespace example {


const vnx::Hash64 LidarProcessorBase::VNX_TYPE_HASH(0x7df3e7fe5968fe76ull);
const vnx::Hash64 LidarProcessorBase::VNX_CODE_HASH(0xdb4e6a575ebb6d3bull);

LidarProcessorBase::LidarProcessorBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".info", info);
	vnx::read_config(vnx_name + ".input", input);
	vnx::read_config(vnx_name + ".output", output);
}

vnx::Hash64 LidarProcessorBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* LidarProcessorBase::get_type_name() const {
	return "example.LidarProcessor";
}

void LidarProcessorBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = get_type_code();
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, input);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, output);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, info);
	_visitor.type_end(*_type_code);
}

void LidarProcessorBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"input\": "; vnx::write(_out, input);
	_out << ", \"output\": "; vnx::write(_out, output);
	_out << ", \"info\": "; vnx::write(_out, info);
	_out << "}";
}

void LidarProcessorBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "info") {
			vnx::from_string(_entry.second, info);
		} else if(_entry.first == "input") {
			vnx::from_string(_entry.second, input);
		} else if(_entry.first == "output") {
			vnx::from_string(_entry.second, output);
		}
	}
}

vnx::Object LidarProcessorBase::to_object() const {
	vnx::Object _object;
	_object["input"] = input;
	_object["output"] = output;
	_object["info"] = info;
	return _object;
}

void LidarProcessorBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "info") {
			_entry.second.to(info);
		} else if(_entry.first == "input") {
			_entry.second.to(input);
		} else if(_entry.first == "output") {
			_entry.second.to(output);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const LidarProcessorBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, LidarProcessorBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* LidarProcessorBase::get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x7df3e7fe5968fe76ull));
	if(!type_code) {
		type_code = vnx::register_type_code(create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> LidarProcessorBase::create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "example.LidarProcessor";
	type_code->type_hash = vnx::Hash64(0x7df3e7fe5968fe76ull);
	type_code->code_hash = vnx::Hash64(0xdb4e6a575ebb6d3bull);
	type_code->depends.resize(1);
	type_code->depends[0] = ::example::LidarInfo::get_type_code();
	type_code->methods.resize(2);
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "example.LidarProcessor.handle_example_LidarInfo";
		call_type->type_hash = vnx::Hash64(0x3b1e2fc2a03761ceull);
		call_type->code_hash = vnx::Hash64(0xd72d368254a36ad2ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "example.LidarProcessor.handle_example_LidarInfo.return";
			return_type->type_hash = vnx::Hash64(0x7967c878d16d870aull);
			return_type->code_hash = vnx::Hash64(0x3436839a1a524067ull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(1);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "sample";
			field.code = {16};
		}
		call_type->build();
		type_code->methods[0] = vnx::register_type_code(call_type);
	}
	{
		std::shared_ptr<vnx::TypeCode> call_type = std::make_shared<vnx::TypeCode>(true);
		call_type->name = "example.LidarProcessor.handle_example_LidarPointCloud";
		call_type->type_hash = vnx::Hash64(0x2998b50070ccccf6ull);
		call_type->code_hash = vnx::Hash64(0x1527148addc5fec9ull);
		call_type->is_method = true;
		{
			std::shared_ptr<vnx::TypeCode> return_type = std::make_shared<vnx::TypeCode>(true);
			return_type->name = "example.LidarProcessor.handle_example_LidarPointCloud.return";
			return_type->type_hash = vnx::Hash64(0x563c486fd84f7fa3ull);
			return_type->code_hash = vnx::Hash64(0x1d3c741c908f895eull);
			return_type->is_return = true;
			return_type->build();
			call_type->return_type = vnx::register_type_code(return_type);
		}
		call_type->fields.resize(1);
		{
			vnx::TypeField& field = call_type->fields[0];
			field.is_extended = true;
			field.name = "sample";
			field.code = {16};
		}
		call_type->build();
		type_code->methods[1] = vnx::register_type_code(call_type);
	}
	type_code->fields.resize(3);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "input";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "output";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "info";
		field.code = {19, 0};
	}
	type_code->build();
	return type_code;
}

void LidarProcessorBase::handle_switch(std::shared_ptr<const ::vnx::Sample> _sample) {
	const uint64_t _type_hash = _sample->value->get_type_hash();
	if(_type_hash == 0x8d11d39b0f5a7b5cull) {
		std::shared_ptr<const example::LidarInfo> _value = std::dynamic_pointer_cast<const example::LidarInfo>(_sample->value);
		if(_value) {
			handle(_value, _sample);
		}
	} else if(_type_hash == 0x245fc412fc39f4acull) {
		std::shared_ptr<const example::LidarPointCloud> _value = std::dynamic_pointer_cast<const example::LidarPointCloud>(_sample->value);
		if(_value) {
			handle(_value, _sample);
		}
	}
}

bool LidarProcessorBase::call_switch(vnx::TypeInput& _in, vnx::TypeOutput& _out, const vnx::TypeCode* _call_type, const vnx::TypeCode* _return_type) {
	if(_call_type->type_hash == vnx::Hash64(0x3b1e2fc2a03761ceull)) {
		::std::shared_ptr<const ::example::LidarInfo> sample;
		const char* const _buf = _in.read(_call_type->total_field_size);
		if(_call_type->is_matched) {
		}
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, sample, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		handle(sample);
		return true;
	} else if(_call_type->type_hash == vnx::Hash64(0x2998b50070ccccf6ull)) {
		::std::shared_ptr<const ::example::LidarPointCloud> sample;
		const char* const _buf = _in.read(_call_type->total_field_size);
		if(_call_type->is_matched) {
		}
		for(const vnx::TypeField* _field : _call_type->ext_fields) {
			switch(_field->native_index) {
				case 0: vnx::read(_in, sample, _call_type, _field->code.data()); break;
				default: vnx::skip(_in, _call_type, _field->code.data());
			}
		}
		handle(sample);
		return true;
	}
	return false;
}


} // namespace example


namespace vnx {

void read(TypeInput& in, ::example::LidarProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.input, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.output, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.info, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::example::LidarProcessorBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::write_type_code<::example::LidarProcessorBase>(out);
		vnx::write_class_header<::example::LidarProcessorBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	vnx::write(out, value.input, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.output, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.info, type_code, type_code->fields[2].code.data());
}

void read(std::istream& in, ::example::LidarProcessorBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::example::LidarProcessorBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::example::LidarProcessorBase& value) {
	value.accept(visitor);
}

} // vnx
