
// AUTO GENERATED by vnxcppcodegen

#include <example/package.hxx>
#include <example/FileServerAsyncClient.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>


namespace example {

FileServerAsyncClient::FileServerAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

FileServerAsyncClient::FileServerAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t FileServerAsyncClient::get_file(const ::std::string& file_name, const std::function<void(::std::shared_ptr<const ::example::File>)>& _callback) {
	std::shared_ptr<vnx::Binary> _argument_data = vnx::Binary::create();
	vnx::BinaryOutputStream _stream_out(_argument_data.get());
	vnx::TypeOutput _out(&_stream_out);
	const vnx::TypeCode* _type_code = example::vnx_native_type_code_FileServer_get_file;
	{
		vnx::write(_out, file_name, _type_code, _type_code->fields[0].code.data());
	}
	_out.flush();
	_argument_data->type_code = _type_code;
	const uint64_t _request_id = vnx_request(_argument_data);
	vnx_queue_get_file[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

std::vector<uint64_t>FileServerAsyncClient::vnx_get_pending_ids() const {
	std::vector<uint64_t> _list;
	for(const auto& entry : vnx_queue_get_file) {
		_list.push_back(entry.first);
	}
	return _list;
}

void FileServerAsyncClient::vnx_purge_request(uint64_t _request_id) {
	vnx_num_pending -= vnx_queue_get_file.erase(_request_id);
}

void FileServerAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Binary> _data) {
	vnx::BinaryInputStream _stream_in(_data.get());
	vnx::TypeInput _in(&_stream_in);
	const vnx::TypeCode* _return_type = _data->type_code;
	
	if(_return_type->type_hash == vnx::Hash64(0x13362942844b1d03ull)) {
		::std::shared_ptr<const ::example::File> _ret_0;
		{
			const char* const _buf = _in.read(_return_type->total_field_size);
			if(_return_type->is_matched) {
			}
			for(const vnx::TypeField* _field : _return_type->ext_fields) {
				switch(_field->native_index) {
					case 0: vnx::read(_in, _ret_0, _return_type, _field->code.data()); break;
					default: vnx::skip(_in, _return_type, _field->code.data());
				}
			}
		}
		auto _iter = vnx_queue_get_file.find(_request_id);
		if(_iter != vnx_queue_get_file.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_get_file.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback(_ret_0);
			}
		}
	}
}


} // namespace example
